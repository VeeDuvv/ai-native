"""
Observability interfaces for agent monitoring.

This module defines interfaces and base classes for monitoring and
observing agent behavior and performance.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime


class Observable(ABC):
    """
    Base interface for any entity that can be observed.
    
    This interface defines methods for exposing internal state
    and metrics for monitoring and observability.
    """
    
    @abstractmethod
    def get_metrics(self) -> Dict[str, Any]:
        """
        Get current metrics for this entity.
        
        Returns:
            A dictionary of metric names and their current values
        """
        pass
    
    @abstractmethod
    def get_state(self) -> Dict[str, Any]:
        """
        Get the current state of this entity.
        
        Returns:
            A dictionary representing the entity's internal state
        """
        pass
    
    @abstractmethod
    def get_health(self) -> Dict[str, Any]:
        """
        Get the health status of this entity.
        
        Returns:
            A dictionary with health information (status, issues, etc.)
        """
        pass


class ObservableAgent(Observable):
    """
    Interface for agents that can be observed.
    
    This interface extends the Observable interface with agent-specific
    observability methods.
    """
    
    @abstractmethod
    def get_conversation_metrics(self, conversation_id: str) -> Dict[str, Any]:
        """
        Get metrics for a specific conversation.
        
        Args:
            conversation_id: The ID of the conversation
            
        Returns:
            A dictionary of metrics for the conversation
        """
        pass
    
    @abstractmethod
    def get_task_metrics(self, task_type: Optional[str] = None) -> Dict[str, Any]:
        """
        Get metrics for agent tasks.
        
        Args:
            task_type: Optional filter for task type
            
        Returns:
            A dictionary of task metrics
        """
        pass


class Observer(ABC):
    """
    Interface for entities that observe other entities.
    
    This interface defines methods for monitoring and processing
    observations of observable entities.
    """
    
    @abstractmethod
    def observe(self, observable: Observable) -> None:
        """
        Observe an entity and collect metrics/state.
        
        Args:
            observable: The entity to observe
        """
        pass
    
    @abstractmethod
    def get_observations(self, entity_id: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Get collected observations.
        
        Args:
            entity_id: Optional filter for entity ID
            
        Returns:
            A list of observations
        """
        pass


class AgentObserver(Observer):
    """
    Interface for observers that specifically monitor agents.
    
    This interface extends the Observer interface with agent-specific
    observation methods.
    """
    
    @abstractmethod
    def observe_conversation(self, agent_id: str, conversation_id: str) -> None:
        """
        Observe a specific conversation.
        
        Args:
            agent_id: The ID of the agent
            conversation_id: The ID of the conversation
        """
        pass
    
    @abstractmethod
    def observe_task(self, agent_id: str, task_id: str) -> None:
        """
        Observe a specific task.
        
        Args:
            agent_id: The ID of the agent
            task_id: The ID of the task
        """
        pass
    
    @abstractmethod
    def get_agent_health(self, agent_id: str) -> Dict[str, Any]:
        """
        Get the health status of an agent.
        
        Args:
            agent_id: The ID of the agent
            
        Returns:
            A dictionary with health information
        """
        pass


class Alert(ABC):
    """
    Interface for alerts generated by the observability system.
    
    This interface defines methods for creating and managing alerts
    based on observations.
    """
    
    @abstractmethod
    def get_severity(self) -> str:
        """
        Get the severity of the alert.
        
        Returns:
            The severity level (info, warning, error, critical)
        """
        pass
    
    @abstractmethod
    def get_message(self) -> str:
        """
        Get the alert message.
        
        Returns:
            The alert message
        """
        pass
    
    @abstractmethod
    def get_timestamp(self) -> datetime:
        """
        Get the alert timestamp.
        
        Returns:
            When the alert was generated
        """
        pass
    
    @abstractmethod
    def get_entity_id(self) -> str:
        """
        Get the ID of the entity that triggered the alert.
        
        Returns:
            The entity ID
        """
        pass
    
    @abstractmethod
    def get_context(self) -> Dict[str, Any]:
        """
        Get additional context for the alert.
        
        Returns:
            A dictionary with context information
        """
        pass


class AlertManager(ABC):
    """
    Interface for managing and routing alerts.
    
    This interface defines methods for handling alerts generated
    by the observability system.
    """
    
    @abstractmethod
    def add_alert(self, alert: Alert) -> None:
        """
        Add an alert to the manager.
        
        Args:
            alert: The alert to add
        """
        pass
    
    @abstractmethod
    def get_alerts(self, severity: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 start_time: Optional[datetime] = None,
                 end_time: Optional[datetime] = None) -> List[Alert]:
        """
        Get alerts matching specified criteria.
        
        Args:
            severity: Optional filter for severity level
            entity_id: Optional filter for entity ID
            start_time: Optional filter for start time
            end_time: Optional filter for end time
            
        Returns:
            A list of alerts matching the criteria
        """
        pass
    
    @abstractmethod
    def acknowledge_alert(self, alert_id: str) -> None:
        """
        Acknowledge an alert.
        
        Args:
            alert_id: The ID of the alert to acknowledge
        """
        pass
    
    @abstractmethod
    def resolve_alert(self, alert_id: str) -> None:
        """
        Resolve an alert.
        
        Args:
            alert_id: The ID of the alert to resolve
        """
        pass


class SystemMonitor(ABC):
    """
    Interface for monitoring the overall system.
    
    This interface defines methods for collecting and analyzing
    system-wide metrics and health status.
    """
    
    @abstractmethod
    def get_system_metrics(self) -> Dict[str, Any]:
        """
        Get current system-wide metrics.
        
        Returns:
            A dictionary of system metrics
        """
        pass
    
    @abstractmethod
    def get_system_health(self) -> Dict[str, Any]:
        """
        Get the overall system health status.
        
        Returns:
            A dictionary with health information
        """
        pass
    
    @abstractmethod
    def register_observer(self, observer: Observer) -> None:
        """
        Register an observer with the system monitor.
        
        Args:
            observer: The observer to register
        """
        pass
    
    @abstractmethod
    def register_alert_manager(self, alert_manager: AlertManager) -> None:
        """
        Register an alert manager with the system monitor.
        
        Args:
            alert_manager: The alert manager to register
        """
        pass